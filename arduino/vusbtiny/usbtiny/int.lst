GAS LISTING /tmp/ccfkmZsh.s 			page 1


   1               	# 1 "usbtiny/int.S"
   1               	; ======================================================================
   0               	
   2               	; USB interrupt handler
   3               	;
   4               	; This is the handler for the interrupt caused by the initial rising edge
   5               	; on the D+ USB signal. The NRZI encoding and bit stuffing are removed,
   6               	; and the packet is saved in one of the two input buffers. In some cases,
   7               	; a reply packet is sent right away.
   8               	;
   9               	; When a DATA0/DATA1 packet directly follows a SETUP or OUT packet, while
  10               	; this interrupt handler is not yet finished, there would be no time to
  11               	; return and take another interrupt. In that case, the second packet is
  12               	; decoded directly in the same invocation. A packet immediately following
  13               	; an ignored packet is also decoded directly.
  14               	;
  15               	; This code is *extremely* time critical. For instance, there is not a
  16               	; single spare cycle in the receiver loop, and only two in the transmitter
  17               	; loop. In addition, the various code paths are laid out in such a way that
  18               	; the various USB timeouts are not violated, in particular the maximum time
  19               	; between the reception of a packet and the reply, which is 7.5 bit times
  20               	; (TRSPIPD2) for a low-speed USB captive cable. The worst-case delay here
  21               	; is 51 cycles, which is well below the 60 cycles limit, and even below the
  22               	; 6.5 bit times limit for a detachable cable (TRSPIPD1).
  23               	;
  24               	; The interrupt handler must be reached within 34 cycles after D+ goes high
  25               	; for the first time. The interrupt response time is 4 cycles, and the RJMP
  26               	; in the vector table takes 2 cycles. Therefore, the interrupts should not
  27               	; be disabled for longer than: 34 - 4 - 2 = 28 cycles. When the I-bit is
  28               	; reenabled, a single instruction is always executed before a pending
  29               	; interrupt is served, so this instruction should be included in the
  30               	; calculation. For RETI, the next instruction can be anything, so we
  31               	; should assume the worst-case of 4 cycles.
  32               	;
  33               	; The end-of-packet (EOP) is sampled in the second bit, because the USB
  34               	; standard allows the EOP to be delayed by up to one bit. As the EOP
  35               	; duration is two bits, this is not a problem.
  36               	;
  37               	; Stack usage including the return address: 11 bytes.
  38               	;
  39               	; Copyright 2006-2010 Dick Streefland
  40               	;
  41               	; This is free software, licensed under the terms of the GNU General
  42               	; Public License as published by the Free Software Foundation.
  43               	; ======================================================================
  44               	
  45               	#include "def.h"
   1               	// ======================================================================
   2               	// Common definitions for the USB driver
   3               	//
   4               	// Copyright 2006-2010 Dick Streefland
   5               	//
   6               	// This is free software, licensed under the terms of the GNU General
   7               	// Public License as published by the Free Software Foundation.
   8               	// ======================================================================
   9               	
  10               	#ifdef __ASSEMBLER__
GAS LISTING /tmp/ccfkmZsh.s 			page 2


  11               	#define	__SFR_OFFSET		0
  12               	#endif
  13               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h 2211 2011-02-14 14:04:25Z aboyapati $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
GAS LISTING /tmp/ccfkmZsh.s 			page 3


  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
GAS LISTING /tmp/ccfkmZsh.s 			page 4


 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
GAS LISTING /tmp/ccfkmZsh.s 			page 5


 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__) || defined (__AVR_ATmega325A__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__) || defined (__AVR_ATmega3250A__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
 223               	#elif defined (__AVR_ATmega329__) || defined (__AVR_ATmega329A__)
 224               	#  include <avr/iom329.h>
GAS LISTING /tmp/ccfkmZsh.s 			page 6


 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__) || defined (__AVR_ATmega3290A__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega32HVBREVB__)
 234               	#  include <avr/iom32hvbrevb.h>
 235               	#elif defined (__AVR_ATmega406__)
 236               	#  include <avr/iom406.h>
 237               	#elif defined (__AVR_ATmega16__)
 238               	#  include <avr/iom16.h>
 239               	#elif defined (__AVR_ATmega16A__)
 240               	#  include <avr/iom16a.h>
 241               	#elif defined (__AVR_ATmega161__)
 242               	#  include <avr/iom161.h>
 243               	#elif defined (__AVR_ATmega162__)
 244               	#  include <avr/iom162.h>
 245               	#elif defined (__AVR_ATmega163__)
 246               	#  include <avr/iom163.h>
 247               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 248               	#  include <avr/iom164.h>
 249               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 250               	#  include <avr/iom165.h>
 251               	#elif defined (__AVR_ATmega165P__)
 252               	#  include <avr/iom165p.h>
 253               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 254               	#  include <avr/iom168.h>
 255               	#elif defined (__AVR_ATmega168P__)
 256               	#  include <avr/iom168p.h>
 257               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 258               	#  include <avr/iom169.h>
 259               	#elif defined (__AVR_ATmega169P__)
 260               	#  include <avr/iom169p.h>
 261               	#elif defined (__AVR_ATmega169PA__)
 262               	#  include <avr/iom169pa.h>
 263               	#elif defined (__AVR_ATmega8HVA__)
 264               	#  include <avr/iom8hva.h>
 265               	#elif defined (__AVR_ATmega16HVA__)
 266               	#  include <avr/iom16hva.h>
 267               	#elif defined (__AVR_ATmega16HVA2__)
 268               	#  include <avr/iom16hva2.h>
 269               	#elif defined (__AVR_ATmega16HVB__)
 270               	#  include <avr/iom16hvb.h>
 271               	#elif defined (__AVR_ATmega16HVBREVB__)
 272               	#  include <avr/iom16hvbrevb.h>
 273               	#elif defined (__AVR_ATmega8__)
 274               	#  include <avr/iom8.h>
 275               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 276               	#  include <avr/iom48.h>
 277               	#elif defined (__AVR_ATmega48P__)
 278               	#  include <avr/iom48p.h>
 279               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 280               	#  include <avr/iom88.h>
 281               	#elif defined (__AVR_ATmega88P__)
GAS LISTING /tmp/ccfkmZsh.s 			page 7


 282               	#  include <avr/iom88p.h>
 283               	#elif defined (__AVR_ATmega88PA__)
 284               	#  include <avr/iom88pa.h>
 285               	#elif defined (__AVR_ATmega8515__)
 286               	#  include <avr/iom8515.h>
 287               	#elif defined (__AVR_ATmega8535__)
 288               	#  include <avr/iom8535.h>
 289               	#elif defined (__AVR_AT90S8535__)
 290               	#  include <avr/io8535.h>
 291               	#elif defined (__AVR_AT90C8534__)
 292               	#  include <avr/io8534.h>
 293               	#elif defined (__AVR_AT90S8515__)
 294               	#  include <avr/io8515.h>
 295               	#elif defined (__AVR_AT90S4434__)
 296               	#  include <avr/io4434.h>
 297               	#elif defined (__AVR_AT90S4433__)
 298               	#  include <avr/io4433.h>
 299               	#elif defined (__AVR_AT90S4414__)
 300               	#  include <avr/io4414.h>
 301               	#elif defined (__AVR_ATtiny22__)
 302               	#  include <avr/iotn22.h>
 303               	#elif defined (__AVR_ATtiny26__)
 304               	#  include <avr/iotn26.h>
 305               	#elif defined (__AVR_AT90S2343__)
 306               	#  include <avr/io2343.h>
 307               	#elif defined (__AVR_AT90S2333__)
 308               	#  include <avr/io2333.h>
 309               	#elif defined (__AVR_AT90S2323__)
 310               	#  include <avr/io2323.h>
 311               	#elif defined (__AVR_AT90S2313__)
 312               	#  include <avr/io2313.h>
 313               	#elif defined (__AVR_ATtiny4__)
 314               	#  include <avr/iotn4.h>
 315               	#elif defined (__AVR_ATtiny5__)
 316               	#  include <avr/iotn5.h>
 317               	#elif defined (__AVR_ATtiny9__)
 318               	#  include <avr/iotn9.h>
 319               	#elif defined (__AVR_ATtiny10__)
 320               	#  include <avr/iotn10.h>
 321               	#elif defined (__AVR_ATtiny20__)
 322               	#  include <avr/iotn20.h>
 323               	#elif defined (__AVR_ATtiny40__)
 324               	#  include <avr/iotn40.h>
 325               	#elif defined (__AVR_ATtiny2313__)
 326               	#  include <avr/iotn2313.h>
 327               	#elif defined (__AVR_ATtiny2313A__)
 328               	#  include <avr/iotn2313a.h>
 329               	#elif defined (__AVR_ATtiny13__)
 330               	#  include <avr/iotn13.h>
 331               	#elif defined (__AVR_ATtiny13A__)
 332               	#  include <avr/iotn13a.h>
 333               	#elif defined (__AVR_ATtiny25__)
 334               	#  include <avr/iotn25.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch
   2               	   All rights reserved.
   3               	
   4               	   Redistribution and use in source and binary forms, with or without
GAS LISTING /tmp/ccfkmZsh.s 			page 8


   5               	   modification, are permitted provided that the following conditions are met:
   6               	
   7               	   * Redistributions of source code must retain the above copyright
   8               	     notice, this list of conditions and the following disclaimer.
   9               	
  10               	   * Redistributions in binary form must reproduce the above copyright
  11               	     notice, this list of conditions and the following disclaimer in
  12               	     the documentation and/or other materials provided with the
  13               	     distribution.
  14               	
  15               	   * Neither the name of the copyright holders nor the names of
  16               	     contributors may be used to endorse or promote products derived
  17               	     from this software without specific prior written permission.
  18               	
  19               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29               	  POSSIBILITY OF SUCH DAMAGE. */
  30               	
  31               	/* $Id: iotn25.h 2115 2010-04-05 23:19:53Z arcanum $ */
  32               	
  33               	/* avr/iotn25.h - definitions for ATtiny25 */
  34               	
  35               	#ifndef _AVR_IOTN25_H_
  36               	#define _AVR_IOTN25_H_ 1
  37               	
  38               	#include <avr/iotnx5.h>
   1               	/* Copyright (c) 2005,2007 Anatoly Sokolov
  39               	
 335               	#elif defined (__AVR_ATtiny4313__)
 336               	#  include <avr/iotn4313.h>
 337               	#elif defined (__AVR_ATtiny45__)
 338               	#  include <avr/iotn45.h>
 339               	#elif defined (__AVR_ATtiny85__)
 340               	#  include <avr/iotn85.h>
 341               	#elif defined (__AVR_ATtiny24__)
 342               	#  include <avr/iotn24.h>
 343               	#elif defined (__AVR_ATtiny24A__)
 344               	#  include <avr/iotn24a.h>
 345               	#elif defined (__AVR_ATtiny44__)
 346               	#  include <avr/iotn44.h>
 347               	#elif defined (__AVR_ATtiny44A__)
 348               	#  include <avr/iotn44a.h>
 349               	#elif defined (__AVR_ATtiny84__)
 350               	#  include <avr/iotn84.h>
 351               	#elif defined (__AVR_ATtiny84A__)
 352               	#  include <avr/iotn84a.h>  
 353               	#elif defined (__AVR_ATtiny261__)
 354               	#  include <avr/iotn261.h>
 355               	#elif defined (__AVR_ATtiny261A__)
GAS LISTING /tmp/ccfkmZsh.s 			page 9


 356               	#  include <avr/iotn261a.h>
 357               	#elif defined (__AVR_ATtiny461__)
 358               	#  include <avr/iotn461.h>
 359               	#elif defined (__AVR_ATtiny461A__)
 360               	#  include <avr/iotn461a.h>
 361               	#elif defined (__AVR_ATtiny861__)
 362               	#  include <avr/iotn861.h>
 363               	#elif defined (__AVR_ATtiny861A__)
 364               	#  include <avr/iotn861a.h>
 365               	#elif defined (__AVR_ATtiny43U__)
 366               	#  include <avr/iotn43u.h>
 367               	#elif defined (__AVR_ATtiny48__)
 368               	#  include <avr/iotn48.h>
 369               	#elif defined (__AVR_ATtiny88__)
 370               	#  include <avr/iotn88.h>
 371               	#elif defined (__AVR_ATtiny87__)
 372               	#  include <avr/iotn87.h>
 373               	#elif defined (__AVR_ATtiny167__)
 374               	#  include <avr/iotn167.h>
 375               	#elif defined (__AVR_AT90SCR100__)
 376               	#  include <avr/io90scr100.h>
 377               	#elif defined (__AVR_ATxmega16A4__)
 378               	#  include <avr/iox16a4.h>
 379               	#elif defined (__AVR_ATxmega16D4__)
 380               	#  include <avr/iox16d4.h>
 381               	#elif defined (__AVR_ATxmega32A4__)
 382               	#  include <avr/iox32a4.h>
 383               	#elif defined (__AVR_ATxmega32D4__)
 384               	#  include <avr/iox32d4.h>
 385               	#elif defined (__AVR_ATxmega64A1__)
 386               	#  include <avr/iox64a1.h>
 387               	#elif defined (__AVR_ATxmega64A1U__)
 388               	#  include <avr/iox64a1u.h>
 389               	#elif defined (__AVR_ATxmega64A3__)
 390               	#  include <avr/iox64a3.h>
 391               	#elif defined (__AVR_ATxmega64D3__)
 392               	#  include <avr/iox64d3.h>
 393               	#elif defined (__AVR_ATxmega128A1__)
 394               	#  include <avr/iox128a1.h>
 395               	#elif defined (__AVR_ATxmega128A1U__)
 396               	#  include <avr/iox128a1u.h>
 397               	#elif defined (__AVR_ATxmega128A3__)
 398               	#  include <avr/iox128a3.h>
 399               	#elif defined (__AVR_ATxmega128D3__)
 400               	#  include <avr/iox128d3.h>
 401               	#elif defined (__AVR_ATxmega192A3__)
 402               	#  include <avr/iox192a3.h>
 403               	#elif defined (__AVR_ATxmega192D3__)
 404               	#  include <avr/iox192d3.h>
 405               	#elif defined (__AVR_ATxmega256A3__)
 406               	#  include <avr/iox256a3.h>
 407               	#elif defined (__AVR_ATxmega256A3B__)
 408               	#  include <avr/iox256a3b.h>
 409               	#elif defined (__AVR_ATxmega256D3__)
 410               	#  include <avr/iox256d3.h>
 411               	#elif defined (__AVR_ATA6289__)
 412               	#  include <avr/ioa6289.h>
GAS LISTING /tmp/ccfkmZsh.s 			page 10


 413               	/* avr1: the following only supported for assembler programs */
 414               	#elif defined (__AVR_ATtiny28__)
 415               	#  include <avr/iotn28.h>
 416               	#elif defined (__AVR_AT90S1200__)
 417               	#  include <avr/io1200.h>
 418               	#elif defined (__AVR_ATtiny15__)
 419               	#  include <avr/iotn15.h>
 420               	#elif defined (__AVR_ATtiny12__)
 421               	#  include <avr/iotn12.h>
 422               	#elif defined (__AVR_ATtiny11__)
 423               	#  include <avr/iotn11.h>
 424               	#elif defined (__AVR_M3000__)
 425               	#  include <avr/iom3000.h>
 426               	#else
 427               	#  if !defined(__COMPILING_AVR_LIBC__)
 428               	#    warning "device type not defined"
 429               	#  endif
 430               	#endif
 431               	
 432               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 433               	
 434               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 435               	
 436               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 437               	
 438               	/* Include fuse.h after individual IO header files. */
 439               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 440               	
 441               	/* Include lock.h after individual IO header files. */
 442               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 443               	
  14               	#include "usbtiny.h"
   1               	// ======================================================================
  15               	
  46               	
  47               	; ----------------------------------------------------------------------
  48               	; local data
  49               	; ----------------------------------------------------------------------
  50               		.data
  51 0000 D2        	tx_ack:	.byte	USB_PID_ACK		; ACK packet
  52 0001 5A        	tx_nak:	.byte	USB_PID_NAK		; NAK packet
  53               		.lcomm	token_pid, 1		; PID of most recent token packet
  54               		.global	__do_copy_data
  55               	
  56               	; ----------------------------------------------------------------------
  57               	; register definitions
  58               	; ----------------------------------------------------------------------
  59               	// receiver:
  60               	#define	count		r16
  61               	#define	usbmask		r17
  62               	#define	odd		r18
  63               	#define	byte		r19
GAS LISTING /tmp/ccfkmZsh.s 			page 11


  64               	#define	fixup		r20
  65               	#define	even		r22
  66               	
  67               	// transmitter:
  68               	#define	output		odd
  69               	#define	done		fixup
  70               	#define	next		even
  71               	
  72               	// control:
  73               	#define	pid		odd
  74               	#define	addr		usbmask
  75               	#define	tmp		fixup
  76               	
  77               	#define	nop2		rjmp	.+0	// not .+2 for some strange reason
  78               	
  79               	; ----------------------------------------------------------------------
  80               	; interrupt handler
  81               	; ----------------------------------------------------------------------
  82               		.text
  83               		.global	USB_INT_VECTOR
  84               		.type	USB_INT_VECTOR, @function
  85               	; ----------------------------------------------------------------------
  86               	; This handler must be reached no later than 34 cycles after D+ goes high
  87               	; for the first time.
  88               	; ----------------------------------------------------------------------
  89               	USB_INT_VECTOR:
  90               		; save registers
  91:usbtiny/int.S **** 	push	count
  92:usbtiny/int.S **** 	push	usbmask
  93:usbtiny/int.S **** 	push	odd
  94:usbtiny/int.S **** 	push	YH
  95:usbtiny/int.S **** 	push	YL
  96:usbtiny/int.S **** 	in	count, SREG
  97:usbtiny/int.S **** 	push	count
  98               	
  99               	; ----------------------------------------------------------------------
 100               	; Synchronize to the pattern 10101011 on D+. This code must be reached
 101               	; no later than 47 cycles after D+ goes high for the first time.
 102               	; ----------------------------------------------------------------------
 103               	sync:
 104               		; wait until D+ == 0
 105:usbtiny/int.S **** 	sbic	USB_IN, USBTINY_DPLUS
 106:usbtiny/int.S **** 	rjmp	sync			; jump if D+ == 1
 107               	resync:
 108               		; sync on 0-->1 transition on D+ with a 2 cycle resolution
 109:usbtiny/int.S **** 	sbic	USB_IN, USBTINY_DPLUS
 110:usbtiny/int.S **** 	rjmp	sync6			; jump if D+ == 1
 111:usbtiny/int.S **** 	sbic	USB_IN, USBTINY_DPLUS
 112:usbtiny/int.S **** 	rjmp	sync6			; jump if D+ == 1
 113:usbtiny/int.S **** 	sbic	USB_IN, USBTINY_DPLUS
 114:usbtiny/int.S **** 	rjmp	sync6			; jump if D+ == 1
 115:usbtiny/int.S **** 	sbic	USB_IN, USBTINY_DPLUS
 116:usbtiny/int.S **** 	rjmp	sync6			; jump if D+ == 1
 117:usbtiny/int.S **** 	sbic	USB_IN, USBTINY_DPLUS
 118:usbtiny/int.S **** 	rjmp	sync6			; jump if D+ == 1
 119:usbtiny/int.S **** 	ldi	count, 1<<USB_INT_PENDING_BIT
 120:usbtiny/int.S **** 	out	USB_INT_PENDING, count
GAS LISTING /tmp/ccfkmZsh.s 			page 12


 121:usbtiny/int.S **** 	rjmp	return			; ==> false start, bail out
 122               	
 123               	sync6:
 124               		; we are now between -1 and +1 cycle from the center of the bit
 125               		; following the 0-->1 transition
 126:usbtiny/int.S **** 	lds	YL, usb_rx_off
 127:usbtiny/int.S **** 	clr	YH
 128:usbtiny/int.S **** 	subi	YL, lo8(-(usb_rx_buf))	; Y = & usb_rx_buf[usb_rx_off]
 129:usbtiny/int.S **** 	sbci	YH, hi8(-(usb_rx_buf))
 130:usbtiny/int.S **** 	ldi	count, USB_BUFSIZE	; limit on number of bytes to receive
 131:usbtiny/int.S **** 	ldi	usbmask, USB_MASK	; why is there no eori instruction?
 132:usbtiny/int.S **** 	ldi	odd, USB_MASK_DPLUS
 133               	
 134               	sync7:
 135               		; the last sync bit should also be 1
 136:usbtiny/int.S **** 	sbis	USB_IN, USBTINY_DPLUS	; bit 7 of sync byte?
 137:usbtiny/int.S **** 	rjmp	resync			; no, wait for next transition
 138:usbtiny/int.S **** 	push	byte
 139:usbtiny/int.S **** 	push	fixup
 140:usbtiny/int.S **** 	push	even
 141               	
 142               	; ----------------------------------------------------------------------
 143               	; receiver loop
 144               	; ----------------------------------------------------------------------
 145:usbtiny/int.S **** 	in	even, USB_IN		; sample bit 0
 146:usbtiny/int.S **** 	ldi	byte, 0x80		; load sync byte for correct unstuffing
 147:usbtiny/int.S **** 	rjmp	rxentry			; 2 cycles
 148               	
 149               	rxloop:
 150:usbtiny/int.S **** 	in	even, USB_IN		; sample bit 0
 151:usbtiny/int.S **** 	or	fixup, byte
 152:usbtiny/int.S **** 	st	Y+, fixup		; 2 cycles
 153               	rxentry:
 154:usbtiny/int.S **** 	clr	fixup
 155:usbtiny/int.S **** 	andi	even, USB_MASK
 156:usbtiny/int.S **** 	eor	odd, even
 157:usbtiny/int.S **** 	subi	odd, 1
 158:usbtiny/int.S **** 	in	odd, USB_IN		; sample bit 1
 159:usbtiny/int.S **** 	andi	odd, USB_MASK
 160:usbtiny/int.S **** 	breq	eop			; ==> EOP detected
 161:usbtiny/int.S **** 	ror	byte
 162:usbtiny/int.S **** 	cpi	byte, 0xfc
 163:usbtiny/int.S **** 	brcc	skip0
 164               	skipped0:
 165:usbtiny/int.S **** 	eor	even, odd
 166:usbtiny/int.S **** 	subi	even, 1
 167:usbtiny/int.S **** 	in	even, USB_IN		; sample bit 2
 168:usbtiny/int.S **** 	andi	even, USB_MASK
 169:usbtiny/int.S **** 	ror	byte
 170:usbtiny/int.S **** 	cpi	byte, 0xfc
 171:usbtiny/int.S **** 	brcc	skip1
 172               	skipped1:
 173:usbtiny/int.S **** 	eor	odd, even
 174:usbtiny/int.S **** 	subi	odd, 1
 175:usbtiny/int.S **** 	ror	byte
 176:usbtiny/int.S **** 	in	odd, USB_IN		; sample bit 3
 177:usbtiny/int.S **** 	andi	odd, USB_MASK
GAS LISTING /tmp/ccfkmZsh.s 			page 13


 178:usbtiny/int.S **** 	cpi	byte, 0xfc
 179:usbtiny/int.S **** 	brcc	skip2
 180:usbtiny/int.S **** 	eor	even, odd
 181:usbtiny/int.S **** 	subi	even, 1
 182:usbtiny/int.S **** 	ror	byte
 183               	skipped2:
 184:usbtiny/int.S **** 	cpi	byte, 0xfc
 185:usbtiny/int.S **** 	in	even, USB_IN		; sample bit 4
 186:usbtiny/int.S **** 	andi	even, USB_MASK
 187:usbtiny/int.S **** 	brcc	skip3
 188:usbtiny/int.S **** 	eor	odd, even
 189:usbtiny/int.S **** 	subi	odd, 1
 190:usbtiny/int.S **** 	ror	byte
 191               	skipped4:
 192:usbtiny/int.S **** 	cpi	byte, 0xfc
 193               	skipped3:
 194:usbtiny/int.S **** 	brcc	skip4
 195:usbtiny/int.S **** 	in	odd, USB_IN		; sample bit 5
 196:usbtiny/int.S **** 	andi	odd, USB_MASK
 197:usbtiny/int.S **** 	eor	even, odd
 198:usbtiny/int.S **** 	subi	even, 1
 199:usbtiny/int.S **** 	ror	byte
 200               	skipped5:
 201:usbtiny/int.S **** 	cpi	byte, 0xfc
 202:usbtiny/int.S **** 	brcc	skip5
 203:usbtiny/int.S **** 	dec	count
 204:usbtiny/int.S **** 	in	even, USB_IN		; sample bit 6
 205:usbtiny/int.S **** 	brmi	overflow		; ==> overflow
 206:usbtiny/int.S **** 	andi	even, USB_MASK
 207:usbtiny/int.S **** 	eor	odd, even
 208:usbtiny/int.S **** 	subi	odd, 1
 209:usbtiny/int.S **** 	ror	byte
 210               	skipped6:
 211:usbtiny/int.S **** 	cpi	byte, 0xfc
 212:usbtiny/int.S **** 	brcc	skip6
 213:usbtiny/int.S **** 	in	odd, USB_IN		; sample bit 7
 214:usbtiny/int.S **** 	andi	odd, USB_MASK
 215:usbtiny/int.S **** 	eor	even, odd
 216:usbtiny/int.S **** 	subi	even, 1
 217:usbtiny/int.S **** 	ror	byte
 218:usbtiny/int.S **** 	cpi	byte, 0xfc
 219:usbtiny/int.S **** 	brcs	rxloop			; 2 cycles
 220:usbtiny/int.S **** 	rjmp	skip7
 221               	
 222               	eop:
 223:usbtiny/int.S **** 	rjmp	eop2
 224               	overflow:
 225:usbtiny/int.S **** 	rjmp	ignore
 226               	
 227               	; ----------------------------------------------------------------------
 228               	; out-of-line code to skip stuffing bits
 229               	; ----------------------------------------------------------------------
 230               	skip0:					; 1+6 cycles
 231:usbtiny/int.S **** 	eor	even, usbmask
 232:usbtiny/int.S **** 	in	odd, USB_IN		; resample bit 1
 233:usbtiny/int.S **** 	andi	odd, USB_MASK
 234:usbtiny/int.S **** 	cbr	byte, (1<<7)
GAS LISTING /tmp/ccfkmZsh.s 			page 14


 235:usbtiny/int.S **** 	sbr	fixup, (1<<0)
 236:usbtiny/int.S **** 	rjmp	skipped0
 237               	
 238               	skip1:					; 2+5 cycles
 239:usbtiny/int.S **** 	cbr	byte, (1<<7)
 240:usbtiny/int.S **** 	sbr	fixup, (1<<1)
 241:usbtiny/int.S **** 	in	even, USB_IN		; resample bit 2
 242:usbtiny/int.S **** 	andi	even, USB_MASK
 243:usbtiny/int.S **** 	eor	odd, usbmask
 244:usbtiny/int.S **** 	rjmp	skipped1
 245               	
 246               	skip2:					; 3+7 cycles
 247:usbtiny/int.S **** 	cbr	byte, (1<<7)
 248:usbtiny/int.S **** 	sbr	fixup, (1<<2)
 249:usbtiny/int.S **** 	eor	even, usbmask
 250:usbtiny/int.S **** 	in	odd, USB_IN		; resample bit 3
 251:usbtiny/int.S **** 	andi	odd, USB_MASK
 252:usbtiny/int.S **** 	eor	even, odd
 253:usbtiny/int.S **** 	subi	even, 1
 254:usbtiny/int.S **** 	ror	byte
 255:usbtiny/int.S **** 	rjmp	skipped2
 256               	
 257               	skip3:					; 4+7 cycles
 258:usbtiny/int.S **** 	cbr	byte, (1<<7)
 259:usbtiny/int.S **** 	sbr	fixup, (1<<3)
 260:usbtiny/int.S **** 	eor	odd, usbmask
 261:usbtiny/int.S **** 	ori	byte, 1
 262:usbtiny/int.S **** 	in	even, USB_IN		; resample bit 4
 263:usbtiny/int.S **** 	andi	even, USB_MASK
 264:usbtiny/int.S **** 	eor	odd, even
 265:usbtiny/int.S **** 	subi	odd, 1
 266:usbtiny/int.S **** 	ror	byte
 267:usbtiny/int.S **** 	rjmp	skipped3
 268               	
 269               	skip4:					; 5 cycles
 270:usbtiny/int.S **** 	cbr	byte, (1<<7)
 271:usbtiny/int.S **** 	sbr	fixup, (1<<4)
 272:usbtiny/int.S **** 	eor	even, usbmask
 273:usbtiny/int.S **** 	rjmp	skipped4
 274               	
 275               	skip5:					; 5 cycles
 276:usbtiny/int.S **** 	cbr	byte, (1<<7)
 277:usbtiny/int.S **** 	sbr	fixup, (1<<5)
 278:usbtiny/int.S **** 	eor	odd, usbmask
 279:usbtiny/int.S **** 	rjmp	skipped5
 280               	
 281               	skip6:					; 5 cycles
 282:usbtiny/int.S **** 	cbr	byte, (1<<7)
 283:usbtiny/int.S **** 	sbr	fixup, (1<<6)
 284:usbtiny/int.S **** 	eor	even, usbmask
 285:usbtiny/int.S **** 	rjmp	skipped6
 286               	
 287               	skip7:					; 7 cycles
 288:usbtiny/int.S **** 	cbr	byte, (1<<7)
 289:usbtiny/int.S **** 	sbr	fixup, (1<<7)
 290:usbtiny/int.S **** 	eor	odd, usbmask
 291:usbtiny/int.S **** 	nop2
GAS LISTING /tmp/ccfkmZsh.s 			page 15


 292:usbtiny/int.S **** 	rjmp	rxloop
 293               	
 294               	; ----------------------------------------------------------------------
 295               	; end-of-packet detected (worst-case: 3 cycles after end of SE0)
 296               	; ----------------------------------------------------------------------
 297               	eop2:
 298               		; clear pending interrupt (SE0+3)
 299:usbtiny/int.S **** 	ldi	byte, 1<<USB_INT_PENDING_BIT
 300:usbtiny/int.S **** 	out	USB_INT_PENDING, byte	; clear pending bit at end of packet
 301               		; calculate packet length
 302:usbtiny/int.S **** 	subi	count, USB_BUFSIZE
 303:usbtiny/int.S **** 	neg	count			; count = packet length
 304               		; get PID
 305:usbtiny/int.S **** 	sub	YL, count
 306:usbtiny/int.S **** 	sbci	YH, 0
 307:usbtiny/int.S **** 	ld	pid, Y
 308               		; separate out the non-Token packets (SE0+11)
 309:usbtiny/int.S **** 	sbrc	pid, 1
 310:usbtiny/int.S **** 	rjmp	is_data_handshake	; jump for Data or Handshake packet
 311               		; check ADDR of Token packet (SE0+13)
 312:usbtiny/int.S **** 	ldd	addr, Y+1
 313:usbtiny/int.S **** 	andi	addr, 0x7f
 314:usbtiny/int.S **** 	lds	tmp, usb_address
 315:usbtiny/int.S **** 	cp	addr, tmp		; is this packet for me?
 316:usbtiny/int.S **** 	brne	ignore			; no, ignore
 317               		; dispatch Token packets (SE0+20)
 318:usbtiny/int.S **** 	cpi	pid, USB_PID_IN
 319:usbtiny/int.S **** 	brne	is_setup_out		; handle SETUP and OUT packets
 320               	
 321               	; ----------------------------------------------------------------------
 322               	; Handle IN (SE0+22)
 323               	; ----------------------------------------------------------------------
 324:usbtiny/int.S **** 	lds	count, usb_tx_len
 325:usbtiny/int.S **** 	tst	count			; data ready?
 326:usbtiny/int.S **** 	breq	nak			; no, reply with NAK
 327:usbtiny/int.S **** 	lds	tmp, usb_rx_len
 328:usbtiny/int.S **** 	tst	tmp			; unprocessed input packet?
 329:usbtiny/int.S **** 	brne	nak			; yes, don't send old data for new packet
 330:usbtiny/int.S **** 	sts	usb_tx_len, tmp		; buffer is available again (after reti)
 331:usbtiny/int.S **** 	lds	tmp, usb_new_address
 332:usbtiny/int.S **** 	sts	usb_address, tmp	; assign new address at end of transfer
 333:usbtiny/int.S **** 	ldi	YL, lo8(usb_tx_buf)
 334:usbtiny/int.S **** 	ldi	YH, hi8(usb_tx_buf)
 335:usbtiny/int.S **** 	rjmp	send_packet		; SE0+40, SE0 --> SOP <= 51
 336               	
 337               	; ----------------------------------------------------------------------
 338               	; exit point for ignored packets (SE0+21)
 339               	; ----------------------------------------------------------------------
 340               	ignore:
 341:usbtiny/int.S **** 	clr	pid
 342               	ignore0:
 343               	
 344               	; ----------------------------------------------------------------------
 345               	; Handle SETUP/OUT (SE0+23)
 346               	; ----------------------------------------------------------------------
 347               	is_setup_out:
 348:usbtiny/int.S **** 	sts	token_pid, pid		; save PID of token packet
GAS LISTING /tmp/ccfkmZsh.s 			page 16


 349:usbtiny/int.S **** 	pop	even
 350:usbtiny/int.S **** 	pop	fixup
 351:usbtiny/int.S **** 	pop	byte
 352:usbtiny/int.S **** 	in	count, USB_INT_PENDING	; next packet already started?
 353:usbtiny/int.S **** 	sbrc	count, USB_INT_PENDING_BIT
 354:usbtiny/int.S **** 	rjmp	sync			; yes, get it right away (SE0+35)
 355               	
 356               	; ----------------------------------------------------------------------
 357               	; restore registers and return from interrupt (SE0+34)
 358               	; ----------------------------------------------------------------------
 359               	return:
 360:usbtiny/int.S **** 	pop	count
 361:usbtiny/int.S **** 	out	SREG, count
 362:usbtiny/int.S **** 	pop	YL
 363:usbtiny/int.S **** 	pop	YH
 364:usbtiny/int.S **** 	pop	odd
 365:usbtiny/int.S **** 	pop	usbmask
 366:usbtiny/int.S **** 	pop	count
 367:usbtiny/int.S **** 	reti
 368               	
 369               	; ----------------------------------------------------------------------
 370               	; send NAK packet (SE0+31)
 371               	; ----------------------------------------------------------------------
 372               	nak:
 373:usbtiny/int.S **** 	ldi	YL, lo8(tx_nak)
 374:usbtiny/int.S **** 	ldi	YH, hi8(tx_nak)
 375:usbtiny/int.S **** 	rjmp	send_token
 376               	
 377               	; ----------------------------------------------------------------------
 378               	; Handle Data and Handshake packets (SE0+14)
 379               	; ----------------------------------------------------------------------
 380               	is_data_handshake:
 381:usbtiny/int.S **** 	andi	pid, 0x01
 382:usbtiny/int.S **** 	breq	ignore0			; ignore ACK/NAK/STALL
 383               	
 384               	; ----------------------------------------------------------------------
 385               	; Handle DATA0/DATA1 (SE0+16)
 386               	; ----------------------------------------------------------------------
 387:usbtiny/int.S **** 	lds	pid, token_pid
 388:usbtiny/int.S **** 	tst	pid			; data following our SETUP/OUT
 389:usbtiny/int.S **** 	breq	ignore0			; no, ignore
 390:usbtiny/int.S **** 	lds	tmp, usb_rx_len
 391:usbtiny/int.S **** 	tst	tmp			; buffer free?
 392:usbtiny/int.S **** 	brne	nak			; no, reply with NAK
 393:usbtiny/int.S **** 	sts	usb_rx_len, count	; pass buffer length
 394:usbtiny/int.S **** 	sts	usb_rx_token, pid	; pass PID of token (SETUP or OUT)
 395:usbtiny/int.S **** 	lds	count, usb_rx_off	; switch to other input buffer
 396:usbtiny/int.S **** 	ldi	tmp, USB_BUFSIZE
 397:usbtiny/int.S **** 	sub	tmp, count
 398:usbtiny/int.S **** 	sts	usb_rx_off, tmp
 399               	
 400               	; ----------------------------------------------------------------------
 401               	; send ACK packet (SE0+34)
 402               	; ----------------------------------------------------------------------
 403:usbtiny/int.S **** 	ldi	YL, lo8(tx_ack)
 404:usbtiny/int.S **** 	ldi	YH, hi8(tx_ack)
 405               	send_token:
GAS LISTING /tmp/ccfkmZsh.s 			page 17


 406:usbtiny/int.S **** 	ldi	count, 1		; SE0+37, SE0 --> SOP <= 48
 407               	
 408               	; ----------------------------------------------------------------------
 409               	; acquire the bus and send a packet (11 cycles to SOP)
 410               	; ----------------------------------------------------------------------
 411               	send_packet:
 412:usbtiny/int.S **** 	in	output, USB_OUT
 413:usbtiny/int.S **** 	cbr	output, USB_MASK
 414:usbtiny/int.S **** 	ori	output, USB_MASK_DMINUS
 415:usbtiny/int.S **** 	in	usbmask, USB_DDR
 416:usbtiny/int.S **** 	ori	usbmask, USB_MASK
 417:usbtiny/int.S **** 	out	USB_OUT, output		; idle state
 418:usbtiny/int.S **** 	out	USB_DDR, usbmask	; acquire bus
 419:usbtiny/int.S **** 	ldi	usbmask, USB_MASK
 420:usbtiny/int.S **** 	ldi	byte, 0x80		; start with sync byte
 421               	
 422               	; ----------------------------------------------------------------------
 423               	; transmitter loop
 424               	; ----------------------------------------------------------------------
 425               	txloop:
 426:usbtiny/int.S **** 	sbrs	byte, 0
 427:usbtiny/int.S **** 	eor	output, usbmask
 428:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 0
 429:usbtiny/int.S **** 	ror	byte
 430:usbtiny/int.S **** 	ror	done
 431               	stuffed0:
 432:usbtiny/int.S **** 	cpi	done, 0xfc
 433:usbtiny/int.S **** 	brcc	stuff0
 434:usbtiny/int.S **** 	sbrs	byte, 0
 435:usbtiny/int.S **** 	eor	output, usbmask
 436:usbtiny/int.S **** 	ror	byte
 437               	stuffed1:
 438:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 1
 439:usbtiny/int.S **** 	ror	done
 440:usbtiny/int.S **** 	cpi	done, 0xfc
 441:usbtiny/int.S **** 	brcc	stuff1
 442:usbtiny/int.S **** 	sbrs	byte, 0
 443:usbtiny/int.S **** 	eor	output, usbmask
 444:usbtiny/int.S **** 	ror	byte
 445:usbtiny/int.S **** 	nop
 446               	stuffed2:
 447:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 2
 448:usbtiny/int.S **** 	ror	done
 449:usbtiny/int.S **** 	cpi	done, 0xfc
 450:usbtiny/int.S **** 	brcc	stuff2
 451:usbtiny/int.S **** 	sbrs	byte, 0
 452:usbtiny/int.S **** 	eor	output, usbmask
 453:usbtiny/int.S **** 	ror	byte
 454:usbtiny/int.S **** 	nop
 455               	stuffed3:
 456:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 3
 457:usbtiny/int.S **** 	ror	done
 458:usbtiny/int.S **** 	cpi	done, 0xfc
 459:usbtiny/int.S **** 	brcc	stuff3
 460:usbtiny/int.S **** 	sbrs	byte, 0
 461:usbtiny/int.S **** 	eor	output, usbmask
 462:usbtiny/int.S **** 	ld	next, Y+		; 2 cycles
GAS LISTING /tmp/ccfkmZsh.s 			page 18


 463:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 4
 464:usbtiny/int.S **** 	ror	byte
 465:usbtiny/int.S **** 	ror	done
 466               	stuffed4:
 467:usbtiny/int.S **** 	cpi	done, 0xfc
 468:usbtiny/int.S **** 	brcc	stuff4
 469:usbtiny/int.S **** 	sbrs	byte, 0
 470:usbtiny/int.S **** 	eor	output, usbmask
 471:usbtiny/int.S **** 	ror	byte
 472               	stuffed5:
 473:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 5
 474:usbtiny/int.S **** 	ror	done
 475:usbtiny/int.S **** 	cpi	done, 0xfc
 476:usbtiny/int.S **** 	brcc	stuff5
 477:usbtiny/int.S **** 	sbrs	byte, 0
 478:usbtiny/int.S **** 	eor	output, usbmask
 479:usbtiny/int.S **** 	ror	byte
 480               	stuffed6:
 481:usbtiny/int.S **** 	ror	done
 482:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 6
 483:usbtiny/int.S **** 	cpi	done, 0xfc
 484:usbtiny/int.S **** 	brcc	stuff6
 485:usbtiny/int.S **** 	sbrs	byte, 0
 486:usbtiny/int.S **** 	eor	output, usbmask
 487:usbtiny/int.S **** 	ror	byte
 488:usbtiny/int.S **** 	mov	byte, next
 489               	stuffed7:
 490:usbtiny/int.S **** 	ror	done
 491:usbtiny/int.S **** 	out	USB_OUT, output		; output bit 7
 492:usbtiny/int.S **** 	cpi	done, 0xfc
 493:usbtiny/int.S **** 	brcc	stuff7
 494:usbtiny/int.S **** 	dec	count
 495:usbtiny/int.S **** 	brpl	txloop			; 2 cycles
 496               	
 497:usbtiny/int.S **** 	rjmp	gen_eop
 498               	
 499               	; ----------------------------------------------------------------------
 500               	; out-of-line code to insert stuffing bits
 501               	; ----------------------------------------------------------------------
 502               	stuff0:					; 2+3
 503:usbtiny/int.S **** 	eor	output, usbmask
 504:usbtiny/int.S **** 	clr	done
 505:usbtiny/int.S **** 	out	USB_OUT, output
 506:usbtiny/int.S **** 	rjmp	stuffed0
 507               	
 508               	stuff1:					; 3
 509:usbtiny/int.S **** 	eor	output, usbmask
 510:usbtiny/int.S **** 	rjmp	stuffed1
 511               	
 512               	stuff2:					; 3
 513:usbtiny/int.S **** 	eor	output, usbmask
 514:usbtiny/int.S **** 	rjmp	stuffed2
 515               	
 516               	stuff3:					; 3
 517:usbtiny/int.S **** 	eor	output, usbmask
 518:usbtiny/int.S **** 	rjmp	stuffed3
 519               	
GAS LISTING /tmp/ccfkmZsh.s 			page 19


 520               	stuff4:					; 2+3
 521:usbtiny/int.S **** 	eor	output, usbmask
 522:usbtiny/int.S **** 	clr	done
 523:usbtiny/int.S **** 	out	USB_OUT, output
 524:usbtiny/int.S **** 	rjmp	stuffed4
 525               	
 526               	stuff5:					; 3
 527:usbtiny/int.S **** 	eor	output, usbmask
 528:usbtiny/int.S **** 	rjmp	stuffed5
 529               	
 530               	stuff6:					; 3
 531:usbtiny/int.S **** 	eor	output, usbmask
 532:usbtiny/int.S **** 	rjmp	stuffed6
 533               	
 534               	stuff7:					; 3
 535:usbtiny/int.S **** 	eor	output, usbmask
 536:usbtiny/int.S **** 	rjmp	stuffed7
 537               	
 538               	; ----------------------------------------------------------------------
 539               	; generate EOP, release the bus, and return from interrupt
 540               	; ----------------------------------------------------------------------
 541               	gen_eop:
 542:usbtiny/int.S **** 	cbr	output, USB_MASK
 543:usbtiny/int.S **** 	out	USB_OUT, output		; output SE0 for 2 bit times
 544:usbtiny/int.S **** 	pop	even
 545:usbtiny/int.S **** 	pop	fixup
 546:usbtiny/int.S **** 	pop	byte
 547:usbtiny/int.S **** 	ldi	count, 1<<USB_INT_PENDING_BIT
 548:usbtiny/int.S **** 	out	USB_INT_PENDING, count	; interrupt was triggered by transmit
 549:usbtiny/int.S **** 	pop	YH			; this is the saved SREG
 550:usbtiny/int.S **** 	pop	YL
 551:usbtiny/int.S **** 	in	usbmask, USB_DDR
 552:usbtiny/int.S **** 	mov	count, output
 553:usbtiny/int.S **** 	ori	output, USB_MASK_DMINUS
 554:usbtiny/int.S **** 	out	USB_OUT, output		; output J state for 1 bit time
 555:usbtiny/int.S **** 	cbr	usbmask, USB_MASK
 556:usbtiny/int.S **** 	out	SREG, YH
 557:usbtiny/int.S **** 	pop	YH
 558:usbtiny/int.S **** 	pop	odd			; is the same register as output!
 559:usbtiny/int.S **** 	nop
 560:usbtiny/int.S **** 	out	USB_DDR, usbmask	; release bus
 561:usbtiny/int.S **** 	out	USB_OUT, count		; disable D- pullup
 562:usbtiny/int.S **** 	pop	usbmask
 563:usbtiny/int.S **** 	pop	count
 564:usbtiny/int.S **** 	reti
GAS LISTING /tmp/ccfkmZsh.s 			page 20


DEFINED SYMBOLS
       usbtiny/int.S:51     .data:0000000000000000 tx_ack
       usbtiny/int.S:52     .data:0000000000000001 tx_nak
                             .bss:0000000000000000 token_pid
       usbtiny/int.S:89     .text:0000000000000000 __vector_1
       usbtiny/int.S:103    .text:000000000000000e sync
       usbtiny/int.S:107    .text:0000000000000012 resync
       usbtiny/int.S:123    .text:000000000000002c sync6
       usbtiny/int.S:359    .text:0000000000000184 return
       usbtiny/int.S:134    .text:000000000000003c sync7
       usbtiny/int.S:153    .text:0000000000000052 rxentry
       usbtiny/int.S:149    .text:000000000000004c rxloop
       usbtiny/int.S:222    .text:00000000000000ca eop
       usbtiny/int.S:230    .text:00000000000000ce skip0
       usbtiny/int.S:164    .text:0000000000000066 skipped0
       usbtiny/int.S:238    .text:00000000000000da skip1
       usbtiny/int.S:172    .text:0000000000000074 skipped1
       usbtiny/int.S:246    .text:00000000000000e6 skip2
       usbtiny/int.S:183    .text:0000000000000088 skipped2
       usbtiny/int.S:257    .text:00000000000000f8 skip3
       usbtiny/int.S:191    .text:0000000000000096 skipped4
       usbtiny/int.S:193    .text:0000000000000098 skipped3
       usbtiny/int.S:269    .text:000000000000010c skip4
       usbtiny/int.S:200    .text:00000000000000a4 skipped5
       usbtiny/int.S:275    .text:0000000000000114 skip5
       usbtiny/int.S:224    .text:00000000000000cc overflow
       usbtiny/int.S:210    .text:00000000000000b6 skipped6
       usbtiny/int.S:281    .text:000000000000011c skip6
       usbtiny/int.S:287    .text:0000000000000124 skip7
       usbtiny/int.S:297    .text:000000000000012e eop2
       usbtiny/int.S:340    .text:0000000000000172 ignore
       usbtiny/int.S:380    .text:000000000000019a is_data_handshake
       usbtiny/int.S:347    .text:0000000000000174 is_setup_out
       usbtiny/int.S:372    .text:0000000000000194 nak
       usbtiny/int.S:411    .text:00000000000001c8 send_packet
       usbtiny/int.S:342    .text:0000000000000174 ignore0
       usbtiny/int.S:405    .text:00000000000001c6 send_token
       usbtiny/int.S:425    .text:00000000000001da txloop
       usbtiny/int.S:431    .text:00000000000001e4 stuffed0
       usbtiny/int.S:502    .text:0000000000000258 stuff0
       usbtiny/int.S:437    .text:00000000000001ee stuffed1
       usbtiny/int.S:508    .text:0000000000000260 stuff1
       usbtiny/int.S:446    .text:00000000000001fe stuffed2
       usbtiny/int.S:512    .text:0000000000000264 stuff2
       usbtiny/int.S:455    .text:000000000000020e stuffed3
       usbtiny/int.S:516    .text:0000000000000268 stuff3
       usbtiny/int.S:466    .text:0000000000000222 stuffed4
       usbtiny/int.S:520    .text:000000000000026c stuff4
       usbtiny/int.S:472    .text:000000000000022c stuffed5
       usbtiny/int.S:526    .text:0000000000000274 stuff5
       usbtiny/int.S:480    .text:000000000000023a stuffed6
       usbtiny/int.S:530    .text:0000000000000278 stuff6
       usbtiny/int.S:489    .text:000000000000024a stuffed7
       usbtiny/int.S:534    .text:000000000000027c stuff7
       usbtiny/int.S:541    .text:0000000000000280 gen_eop

UNDEFINED SYMBOLS
GAS LISTING /tmp/ccfkmZsh.s 			page 21


__do_copy_data
usb_rx_off
usb_rx_buf
usb_address
usb_tx_len
usb_rx_len
usb_new_address
usb_tx_buf
usb_rx_token
